import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { MessageSquare, Clock, User, Phone, Mail, Plus } from 'lucide-react';

const InteractionLog: React.FC = () => {
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    client: '',
    type: 'phone',
    summary: '',
    notes: '',
    followUp: ''
  });

  const interactions = [
    {
      id: 1,
      client: 'Heritage Medical Center',
      contact: 'Dr. Sarah Johnson',
      type: 'phone',
      summary: 'Discussed AI implementation for patient records',
      timestamp: '2024-01-15 14:30',
      followUp: 'Schedule demo with IQT team',
      status: 'pending'
    },
    {
      id: 2,
      client: 'TechStart Solutions',
      contact: 'Mike Chen',
      type: 'email',
      summary: 'Contract renewal discussion',
      timestamp: '2024-01-15 11:15',
      followUp: 'Send updated proposal',
      status: 'completed'
    },
    {
      id: 3,
      client: 'Global Manufacturing Corp',
      contact: 'Lisa Rodriguez',
      type: 'meeting',
      summary: 'Quarterly business review',
      timestamp: '2024-01-14 16:00',
      followUp: 'Prepare Q2 roadmap presentation',
      status: 'in-progress'
    }
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('New interaction logged:', formData);
    setShowForm(false);
    setFormData({ client: '', type: 'phone', summary: '', notes: '', followUp: '' });
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'phone': return <Phone className="h-4 w-4" />;
      case 'email': return <Mail className="h-4 w-4" />;
      case 'meeting': return <User className="h-4 w-4" />;
      default: return <MessageSquare className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Interaction Log</h2>
          <p className="text-gray-600">Track all client communications and follow-ups</p>
        </div>
        <Button onClick={() => setShowForm(true)} className="bg-red-700 hover:bg-red-800">
          <Plus className="h-4 w-4 mr-2" />
          Log Interaction
        </Button>
      </div>

      {showForm && (
        <Card>
          <CardHeader>
            <CardTitle>Log New Interaction</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  placeholder="Client Name"
                  value={formData.client}
                  onChange={(e) => setFormData({...formData, client: e.target.value})}
                  required
                />
                <select
                  className="px-3 py-2 border border-gray-300 rounded-md"
                  value={formData.type}
                  onChange={(e) => setFormData({...formData, type: e.target.value})}
                >
                  <option value="phone">Phone Call</option>
                  <option value="email">Email</option>
                  <option value="meeting">Meeting</option>
                </select>
              </div>
              <Input
                placeholder="Interaction Summary"
                value={formData.summary}
                onChange={(e) => setFormData({...formData, summary: e.target.value})}
                required
              />
              <Textarea
                placeholder="Detailed Notes"
                value={formData.notes}
                onChange={(e) => setFormData({...formData, notes: e.target.value})}
                rows={3}
              />
              <Input
                placeholder="Follow-up Action Required"
                value={formData.followUp}
                onChange={(e) => setFormData({...formData, followUp: e.target.value})}
              />
              <div className="flex gap-2">
                <Button type="submit" className="bg-red-700 hover:bg-red-800">
                  Log Interaction
                </Button>
                <Button type="button" variant="outline" onClick={() => setShowForm(false)}>
                  Cancel
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-4">
        {interactions.map((interaction) => (
          <Card key={interaction.id} className="hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2 text-red-700">
                    {getTypeIcon(interaction.type)}
                    <span className="font-medium capitalize">{interaction.type}</span>
                  </div>
                  <Badge className={getStatusColor(interaction.status)}>
                    {interaction.status.replace('-', ' ')}
                  </Badge>
                </div>
                <div className="flex items-center text-gray-500 text-sm">
                  <Clock className="h-4 w-4 mr-1" />
                  {interaction.timestamp}
                </div>
              </div>
              
              <div className="space-y-2">
                <div className="flex justify-between">
                  <h3 className="font-semibold text-gray-900">{interaction.client}</h3>
                  <span className="text-sm text-gray-600">{interaction.contact}</span>
                </div>
                <p className="text-gray-700">{interaction.summary}</p>
                {interaction.followUp && (
                  <div className="bg-yellow-50 p-3 rounded-lg border-l-4 border-yellow-400">
                    <p className="text-sm text-yellow-800">
                      <strong>Follow-up:</strong> {interaction.followUp}
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default InteractionLog;