import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Search, BookOpen, FileText, Users, AlertTriangle, CheckCircle, ExternalLink } from 'lucide-react';

const KnowledgeBase: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const sopDocuments = [
    {
      id: 1,
      title: 'New Client Onboarding',
      category: 'client-management',
      description: 'Complete step-by-step process for onboarding new clients, from initial contact to project kickoff.',
      lastUpdated: '2024-01-10',
      priority: 'high',
      estimatedTime: '45 minutes',
      icon: <Users className="h-5 w-5" />
    },
    {
      id: 2,
      title: 'Client Project Kick-off',
      category: 'project-management',
      description: 'Standard procedures for initiating new client projects, including stakeholder alignment and deliverable planning.',
      lastUpdated: '2024-01-08',
      priority: 'high',
      estimatedTime: '30 minutes',
      icon: <CheckCircle className="h-5 w-5" />
    },
    {
      id: 3,
      title: 'Handling Client Complaints',
      category: 'client-management',
      description: 'Escalation procedures and resolution strategies for addressing client concerns and complaints.',
      lastUpdated: '2024-01-12',
      priority: 'critical',
      estimatedTime: '20 minutes',
      icon: <AlertTriangle className="h-5 w-5" />
    },
    {
      id: 4,
      title: 'Contract Amendment Process',
      category: 'legal',
      description: 'Guidelines for modifying existing client contracts, including approval workflows and documentation requirements.',
      lastUpdated: '2024-01-05',
      priority: 'medium',
      estimatedTime: '25 minutes',
      icon: <FileText className="h-5 w-5" />
    },
    {
      id: 5,
      title: 'Quality Assurance Checklist',
      category: 'project-management',
      description: 'Comprehensive QA procedures for deliverable review and client approval processes.',
      lastUpdated: '2024-01-15',
      priority: 'high',
      estimatedTime: '35 minutes',
      icon: <CheckCircle className="h-5 w-5" />
    },
    {
      id: 6,
      title: 'Emergency Response Protocol',
      category: 'operations',
      description: 'Immediate response procedures for critical client issues and system outages.',
      lastUpdated: '2024-01-14',
      priority: 'critical',
      estimatedTime: '15 minutes',
      icon: <AlertTriangle className="h-5 w-5" />
    }
  ];

  const categories = [
    { id: 'all', label: 'All Categories', count: sopDocuments.length },
    { id: 'client-management', label: 'Client Management', count: sopDocuments.filter(doc => doc.category === 'client-management').length },
    { id: 'project-management', label: 'Project Management', count: sopDocuments.filter(doc => doc.category === 'project-management').length },
    { id: 'operations', label: 'Operations', count: sopDocuments.filter(doc => doc.category === 'operations').length },
    { id: 'legal', label: 'Legal', count: sopDocuments.filter(doc => doc.category === 'legal').length }
  ];

  const filteredDocuments = sopDocuments.filter(doc => {
    const matchesSearch = doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         doc.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Knowledge Base</h2>
          <p className="text-gray-600">Access critical SOPs and client-facing procedures</p>
        </div>
        <Button className="bg-red-700 hover:bg-red-800">
          <BookOpen className="h-4 w-4 mr-2" />
          Request New SOP
        </Button>
      </div>

      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Search SOPs and procedures..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex gap-2 flex-wrap">
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => setSelectedCategory(category.id)}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                selectedCategory === category.id
                  ? 'bg-red-700 text-white'
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {category.label} ({category.count})
            </button>
          ))}
        </div>
      </div>

      <div className="grid gap-4">
        {filteredDocuments.map((doc) => (
          <Card key={doc.id} className="hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-red-50 rounded-lg text-red-700">
                    {doc.icon}
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">{doc.title}</h3>
                    <p className="text-sm text-gray-600 capitalize">{doc.category.replace('-', ' ')}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge className={getPriorityColor(doc.priority)}>
                    {doc.priority}
                  </Badge>
                  <span className="text-sm text-gray-500">
                    Updated {doc.lastUpdated}
                  </span>
                </div>
              </div>
              
              <p className="text-gray-700 mb-4">{doc.description}</p>
              
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-4 text-sm text-gray-600">
                  <span>ðŸ“– Est. reading time: {doc.estimatedTime}</span>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">
                    <ExternalLink className="h-4 w-4 mr-1" />
                    Open SOP
                  </Button>
                  <Button variant="outline" size="sm">
                    Quick Reference
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredDocuments.length === 0 && (
        <div className="text-center py-12">
          <div className="text-gray-400 mb-4">
            <BookOpen className="h-12 w-12 mx-auto" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No documents found</h3>
          <p className="text-gray-600">Try adjusting your search terms or category filter</p>
        </div>
      )}

      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-6">
          <div className="flex items-start gap-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <BookOpen className="h-6 w-6 text-blue-700" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">Academy Pillar Integration</h3>
              <p className="text-blue-800 text-sm mb-3">
                All SOPs are maintained and updated through our Academy Pillar system. For the most current versions 
                and additional training materials, access the full Academy portal.
              </p>
              <Button variant="outline" size="sm" className="border-blue-300 text-blue-700 hover:bg-blue-100">
                <ExternalLink className="h-4 w-4 mr-1" />
                Access Academy Portal
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default KnowledgeBase;